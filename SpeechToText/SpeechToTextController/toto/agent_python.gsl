.# > name="2- Full agent"
.# > keyword="Python"
.# > description="A fully-fledged Python agent, ready for industrial use."
.# > agentMode="ONE"
.# > onlyAgentDefinitionSupport="true"
.template 0
function typeToIGSType (type)
   if (type = "STRING")
       return "igs.STRING_T"
   elsif (type = "INTEGER")
       return "igs.INTEGER_T"
   elsif (type = "DOUBLE")
       return "igs.DOUBLE_T"
   elsif (type = "BOOL")
       return "igs.BOOL_T"
   elsif (type = "IMPULSION")
       return "igs.IMPULSION_T"
   elsif (type = "DATA")
       return "igs.DATA_T"
   endif
endfunction typeToIGSType

function nameToCName (name)
    return '$("$(name:c)":Neat)'
endfunction nameToCName

function agentNameToCAgentName (agentName)
    return "$(my.agentName:c)"
endfunction agentNameToCAgentName

.endtemplate
.template 1
.ignorecase = 0
.
.####################################################################################
.echo "Creating directories structure ..."
.directory.create("src")
.
.####################################################################################
.echo "Generating src/main.py ..."
.directory.create("src")
.output "src/main.py"
#!/usr/bin/env -P /usr/bin:/usr/local/bin python3 -B
# coding: utf-8

#
#  main.py
#  $(definition.name) $(definition.version ?? "version " + definition.version)
#  Created $(defined(definition.author) ?? "by " + definition.author ? "") on $(date.picture())
#
.if (defined(definition->plainTextDescription) & string.length(definition->plainTextDescription))
# $(definition->plainTextDescription:block)
.else
# "no description"
.endif
#

import signal
import getopt
import time
from pathlib import Path
import traceback
import sys

from $(agentNameToCAgentName(definition.name)) import *

.if (defined(definition.defaultPort) & string.length(definition.defaultPort))
port = $(definition.defaultPort)
.else
port = 5670
.endif
agent_name = "$(definition.name)"
device = None
verbose = False
is_interrupted = False

short_flag = "hvip:d:n:"
long_flag = ["help", "verbose", "interactive_loop", "port=", "device=", "name="]

ingescape_path = Path("~/Documents/Ingescape").expanduser()


def print_usage():
    print("Usage example: ", agent_name, " --verbose --port 5670 --device device_name")
    print("\\nthese parameters have default value (indicated here above):")
    print("--verbose : enable verbose mode in the application (default is disabled)")
    print("--port port_number : port used for autodiscovery between agents (default: 31520)")
    print("--device device_name : name of the network device to be used (useful if several devices available)")
    print("--name agent_name : published name for this agent (default: ", agent_name, ")")
    print("--interactive_loop : enables interactive loop to pass commands in CLI (default: false)")


def print_usage_help():
    print("Available commands in the terminal:")
    print("\t/quit : quits the agent")
    print("\t/help : displays this message")

def return_io_value_type_as_str(value_type):
    if value_type == igs.INTEGER_T:
        return "Integer"
    elif value_type == igs.DOUBLE_T:
        return "Double"
    elif value_type == igs.BOOL_T:
        return "Bool"
    elif value_type == igs.STRING_T:
        return "String"
    elif value_type == igs.IMPULSION_T:
        return "Impulsion"
    elif value_type == igs.DATA_T:
        return "Data"
    else:
        return "Unknown"

def return_event_type_as_str(event_type):
    if event_type == igs.PEER_ENTERED:
        return "PEER_ENTERED"
    elif event_type == igs.PEER_EXITED:
        return "PEER_EXITED"
    elif event_type == igs.AGENT_ENTERED:
        return "AGENT_ENTERED"
    elif event_type == igs.AGENT_UPDATED_DEFINITION:
        return "AGENT_UPDATED_DEFINITION"
    elif event_type == igs.AGENT_KNOWS_US:
        return "AGENT_KNOWS_US"
    elif event_type == igs.AGENT_EXITED:
        return "AGENT_EXITED"
    elif event_type == igs.AGENT_UPDATED_MAPPING:
        return "AGENT_UPDATED_MAPPING"
    elif event_type == igs.AGENT_WON_ELECTION:
        return "AGENT_WON_ELECTION"
    elif event_type == igs.AGENT_LOST_ELECTION:
        return "AGENT_LOST_ELECTION"
    else:
        return "UNKNOWN"

def signal_handler(signal_received, frame):
    global is_interrupted
    print("\\n", signal.strsignal(signal_received), sep="")
    is_interrupted = True


def on_agent_event_callback(event, uuid, name, event_data, my_data):
    try:
        agent_object = my_data
        assert isinstance(agent_object, $(agentNameToCAgentName(definition.name)))
        # add code here if needed
    except:
        print(traceback.format_exc())


.if (defined (definition.iopCallbackMode))
.if (!(definition.iopCallbackMode = "none") & (count(definition.input) > 0))

# inputs
.endif
.for definition.input
def $(nameToCName(input.name))_input_callback(io_type, name, value_type, value, my_data):
    try:
        agent_object = my_data
        assert isinstance(agent_object, $(agentNameToCAgentName(definition.name)))
.if(!(input.type = "IMPULSION"))
        agent_object.$(nameToCName(input.name))I = value
.endif
        # add code here if needed
    except:
        print(traceback.format_exc())

.endfor
.endif
.if (defined (definition.iopCallbackMode))
.if (!(definition.iopCallbackMode = "none") & (count(definition.parameter) > 0))
# attributes
.endif
.for definition.parameter
def $(nameToCName(parameter.name))_attribute_callback(io_type, name, value_type, value, my_data):
    try:
        agent_object = my_data
        assert isinstance(agent_object, $(agentNameToCAgentName(definition.name)))
.if(!(parameter.type = "IMPULSION"))
        agent_object.$(nameToCName(parameter.name))A = value
.endif
        # add code here if needed
    except:
        print(traceback.format_exc())


.endfor
.endif
.if (count(definition.service) > 0)
# services
.endif
.for service
def $(nameToCName(service.name))_callback(sender_agent_name, sender_agent_uuid, service_name, tuple_args, token, my_data):
    try:
        agent_object = my_data
        assert isinstance(agent_object, $(agentNameToCAgentName(definition.name)))
.serviceArgIndex = 0
.for argument
        $(nameToCName(argument.name)) = tuple_args[$(serviceArgIndex)]
.serviceArgIndex = serviceArgIndex +1
.endfor
        agent_object.$(nameToCName(service.name))(sender_agent_name, sender_agent_uuid\
.for argument
, $(nameToCName(argument.name))\
.endfor
\)
    except:
        print(traceback.format_exc())


.endfor
if __name__ == "__main__":

    # catch SIGINT handler before starting agent
    signal.signal(signal.SIGINT, signal_handler)
    interactive_loop = False

    try:
        opts, args = getopt.getopt(sys.argv[1:], short_flag, long_flag)
    except getopt.GetoptError as err:
        igs.error(err)
        sys.exit(2)
    for o, a in opts:
        if o == "-h" or o == "--help":
            print_usage()
            exit(0)
        elif o == "-v" or o == "--verbose":
            verbose = True
        elif o == "-i" or o == "--interactive_loop":
            interactive_loop = True
        elif o == "-p" or o == "--port":
            port = int(a)
        elif o == "-d" or o == "--device":
            device = a
        elif o == "-n" or o == "--name":
            agent_name = a
        else:
            assert False, "unhandled option"

    igs.agent_set_name(agent_name)
.if (defined (definition.version) & string.length(definition.version))
    igs.definition_set_version("$(definition.version)")
.endif
.if (defined (definition->description) & string.length(definition->description))
    igs.definition_set_description("$(definition->description)")
.endif
.if (defined (definition.class) & string.length(definition.class))
    igs.definition_set_class("$(definition.class)")
.endif
.if (defined (definition.package) & string.length(definition.package))
    igs.definition_set_package("$(definition.package)")
.endif
    igs.log_set_console(verbose)
    igs.log_set_file(True, None)
    igs.log_set_stream(verbose)
    igs.set_command_line(sys.executable + " " + " ".join(sys.argv))

    igs.debug(f"Ingescape version: {igs.version()} (protocol v{igs.protocol()})")

    if device is None:
        # we have no device to start with: try to find one
        list_devices = igs.net_devices_list()
        list_addresses = igs.net_addresses_list()
        if len(list_devices) == 1:
            device = list_devices[0]
            igs.info("using %s as default network device (this is the only one available)" % str(device))
        elif len(list_devices) == 2 and (list_addresses[0] == "127.0.0.1" or list_addresses[1] == "127.0.0.1"):
            if list_addresses[0] == "127.0.0.1":
                device = list_devices[1]
            else:
                device = list_devices[0]
            print("using %s as de fault network device (this is the only one available that is not the loopback)" % str(device))
        else:
            if len(list_devices) == 0:
                igs.error("No network device found: aborting.")
            else:
                igs.error("No network device passed as command line parameter and several are available.")
                print("Please use one of these network devices:")
                for device in list_devices:
                    print("\t", device)
                print_usage()
            exit(1)

    agent = $(agentNameToCAgentName(definition.name))()

    igs.observe_agent_events(on_agent_event_callback, agent)

.for definition.parameter
    igs.attribute_create("$(parameter.name)", $(typeToIGSType(parameter.type)), None)
.if (defined (parameter.description) & string.length(parameter.description))
    igs.attribute_set_description("$(parameter.name)", """$(parameter.description)""")
.endif
.if (defined (parameter.constraint) & string.length(parameter.constraint))
    igs.attribute_add_constraint("$(parameter.name)", "$(parameter.constraint)")
.endif
.if (defined (parameter.detailedTypeFullName) & string.length(parameter.detailedTypeFullName))
.   if (defined (parameter.detailedTypeSpecification) & string.length(parameter.detailedTypeSpecification))
    igs.attribute_set_detailed_type("$(parameter.name)", "$(parameter.detailedTypeFullName)", "$(parameter.detailedTypeSpecification)")
.   else
    igs.attribute_set_detailed_type("$(parameter.name)", "$(parameter.detailedTypeFullName)", "")
.   endif
.endif
    igs.observe_attribute("$(parameter.name)", $(nameToCName(parameter.name))_attribute_callback, agent)
.endfor
.if (count(definition.parameter)>0)

.endif
.for definition.input
    igs.input_create("$(input.name)", $(typeToIGSType(input.type)), None)
.if (defined (input.description) & string.length(input.description))
    igs.input_set_description("$(input.name)", """$(input.description)""")
.endif
.if (defined (input.constraint) & string.length(input.constraint))
    igs.input_add_constraint("$(input.name)", "$(input.constraint)")
.endif
.if (defined (input.detailedTypeFullName) & string.length(input.detailedTypeFullName))
.   if (defined (input.detailedTypeSpecification) & string.length(input.detailedTypeSpecification))
    igs.input_set_detailed_type("$(input.name)", "$(input.detailedTypeFullName)", "$(input.detailedTypeSpecification)")
.   else
    igs.input_set_detailed_type("$(input.name)", "$(input.detailedTypeFullName)", "")
.   endif
.endif
    igs.observe_input("$(input.name)", $(nameToCName(input.name))_input_callback, agent)
.endfor
.if (count(definition.input)>0)

.endif
.for definition.output
    igs.output_create("$(output.name)", $(typeToIGSType(output.type)), None)
.if (defined (output.description) & string.length(output.description))
    igs.output_set_description("$(output.name)", """$(output.description)""")
.endif
.if (defined (output.constraint) & string.length(output.constraint))
    igs.output_add_constraint("$(output.name)", "$(output.constraint)")
.endif
.if (defined (output.detailedTypeFullName) & string.length(output.detailedTypeFullName))
.   if (defined (output.detailedTypeSpecification) & string.length(output.detailedTypeSpecification))
    igs.output_set_detailed_type("$(output.name)", "$(output.detailedTypeFullName)", "$(output.detailedTypeSpecification)")
.   else
    igs.output_set_detailed_type("$(output.name)", "$(output.detailedTypeFullName)", "")
.   endif
.endif
.endfor
.if (count(definition.output)>0)

.endif
.for service
    igs.service_init("$(service.name)", $(nameToCName(service.name))_callback, agent)
.for argument
    igs.service_arg_add("$(service.name)", "$(argument.name)", $(typeToIGSType(argument.type)))
.endfor
.for service.reply
    igs.service_reply_add("$(service.name)", "$(reply.name)");
.   for reply.argument
    igs.service_reply_arg_add("$(service.name)", "$(reply.name)", "$(argument.name)", $(typeToIGSType(argument.type)));
.   endfor
.endfor
.endfor
.if (count(definition.service)>0)

.endif
    igs.start_with_device(device, port)
    # catch SIGINT handler after starting agent
    signal.signal(signal.SIGINT, signal_handler)

    if interactive_loop:
        print_usage_help()
        while True:
            command = input()
            if command == "/quit":
                break
            elif command == "/help":
                print_usage_help()
    else:
        while (not is_interrupted) and igs.is_started():
            time.sleep(2)

    if igs.is_started():
        igs.stop()
.
.echo "Generating src/$(agentNameToCAgentName(definition.name)).py ..."
.directory.create("src")
.output "src/$(agentNameToCAgentName(definition.name)).py"
#!/usr/bin/env -P /usr/bin:/usr/local/bin python3 -B
# coding: utf-8

#
#  $(agentNameToCAgentName(definition.name)).py
#  $(agentNameToCAgentName(definition.name)) $(definition.version ?? "version " + definition.version)
#  Created $(defined(definition.author) ?? "by " + definition.author ? "") on $(date.picture())
#
.if (defined(definition->description) & string.length(definition->description))
# $(definition->description:block)
.else
# "no description"
.endif
#
import ingescape as igs


class Singleton(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


class $(agentNameToCAgentName(definition.name))(metaclass=Singleton):
    def __init__(self):
.if (count(definition.input) = 0) & (count(definition.parameter) = 0) & (count(definition.outputs) = 0)
        pass
.endif
.non_imp_total_cnt = 0
.if (!(definition.iopCallbackMode = "none")) & (count(definition.input) > 0)
        # inputs
.endif
.for definition.input
.if(!(input.type = "IMPULSION"))
        self.$(nameToCName(input.name))I = None
.non_imp_total_cnt += 1
.endif
.endfor
.if (count(definition.input) > 0)

.endif
.if (!(definition.iopCallbackMode = "none")) & (count(definition.parameter) > 0)
        # attributes
.endif
.for definition.parameter
.if(!(parameter.type = "IMPULSION"))
        self.$(nameToCName(parameter.name))A = None
.non_imp_total_cnt += 1
.endif
.endfor
.if (count(definition.parameter) > 0)

.endif
.if (!(definition.iopCallbackMode = "none")) & (count(definition.output) > 0)
        # outputs
.endif
.for definition.output
.if(!(output.type = "IMPULSION"))
        self._$(nameToCName(output.name))O = None
.non_imp_total_cnt += 1
.endif
.endfor
.if (count(definition.output) > 0)

.endif
.if (non_imp_total_cnt = 0)
        pass

.endif
.if (!(definition.iopCallbackMode = "none")) & (count(definition.output) > 0)
    # outputs
.endif
.for definition.output
.if (output.type = "IMPULSION")
    def set_$(nameToCName(output.name))O(self):
        igs.output_set_impulsion("$(output.name)")

.else
    @property
    def $(nameToCName(output.name))O(self):
        return self._$(nameToCName(output.name))O

    @$(nameToCName(output.name))O.setter
    def $(nameToCName(output.name))O(self, value):
        self._$(nameToCName(output.name))O = value
        if self._$(nameToCName(output.name))O is not None:
.if (output.type = "INTEGER")
            igs.output_set_int("$(output.name)", self._$(nameToCName(output.name))O)
.elsif (output.type = "DATA")
            igs.output_set_data("$(output.name)", value)
.else
            igs.output_set_$(output.type :lower)("$(output.name)", self._$(nameToCName(output.name))O)
.endif
.endif
.endfor

.if (count(definition.service))
    # services
.endif
.for service
    def $(nameToCName(service.name))(self, sender_agent_name, sender_agent_uuid\
.for argument
, $(nameToCName(argument.name))\
.endfor
\):
        pass
        # add code here if needed

.
.endfor

.if count (project.protobuf) > 0
.####################################################################################
.echo "Generating .proto files ..."
.for project.protobuf
.output "src/$(protobuf.name:c).proto"
$(protobuf:)
.endfor
.endif
.####################################################################################
.echo "Generating other static files ..."
.
.output "requirements.txt"
ingescape>=4
.if count (project.protobuf) > 0
protobuf
.endif
.
.output "README.md"
## Prerequisites

* Python3 (https://www.python.org/downloads/)
* Ingescape python binding (from pip)
.if count (project.protobuf) > 0
* Python protobuf package (from pip)
.endif

## Install dependencies
A requirements.txt is provided. Install dependencies using pip
```bash
pip install -r requirements.txt
```

.if count (project.protobuf) > 0
## Protobuf generated code
This project has .proto files used to describe protocol buffer messages.
You will first have to use the protocol buffer compiler (protoc) to generate python code from those .proto files.
This command line should work on a Unix with a standard protoc installation.
```bash
protoc --python_out=src/ -Isrc/ src/*.proto
```
Python code will be generated inside the `src/` directory

For other environement, please refer to your environment's documentation or protoc's documentation.
.endif

## Run
You can pass arguments to the main script to configure your agent.
```bash
python3 src/main.py --device en0 --port 5670 --name "MyAgent"
```
Some parameters are optional, others are mandatory. Use `--help` to learn more.

.endtemplate
